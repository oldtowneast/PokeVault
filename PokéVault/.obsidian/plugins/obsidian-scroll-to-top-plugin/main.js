/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/setting.ts
var scrollToTopSetting = {
  enabledScrollToTop: true,
  enabledScrollToBottom: true,
  iconScrollToTop: "arrow-up",
  iconScrollToBottom: "arrow-down"
};

// main.ts
var ROOT_WORKSPACE_CLASS = ".mod-vertical.mod-root";
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.maxValue = 100;
    this.currentValue = 0;
  }
  scrollToTop() {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (markdownView) {
      const editor = markdownView.editor;
      const preview = markdownView.previewMode;
      editor && editor.exec("goStart");
      preview && preview.applyScroll(0);
    }
  }
  scrollToBottom() {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (markdownView) {
      const editor = markdownView.editor;
      const preview = markdownView.previewMode;
      editor && editor.exec("goEnd");
      if (preview) {
        let timer = setInterval(() => {
          const prevScroll = preview.getScroll();
          preview.applyScroll(preview.getScroll() + 5);
          if (prevScroll === preview.getScroll()) {
            clearInterval(timer);
          }
        });
      }
    }
  }
  crateScrollElement(config, fn) {
    var _a;
    let topWidget = createEl("div");
    if (topWidget) {
      topWidget.setAttribute("class", `div-${config.id}`);
    }
    topWidget.setAttribute("id", config.id);
    let button = new import_obsidian.ButtonComponent(topWidget);
    button.setIcon(config.icon).setClass("buttonItem").onClick(() => {
      fn();
    });
    (_a = document.body.querySelector(ROOT_WORKSPACE_CLASS)) == null ? void 0 : _a.insertAdjacentElement("afterbegin", topWidget);
    document.addEventListener("click", function(event) {
      const activeLeaf = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeLeaf) {
        topWidget.style.visibility = "visible";
      } else {
        topWidget.style.visibility = "hidden";
      }
    });
  }
  removeButton(id) {
    const element = document.getElementById(id);
    if (element) {
      element.remove();
    }
  }
  createButton() {
    this.currentValue++;
    const { enabledScrollToTop, enabledScrollToBottom, iconScrollToTop, iconScrollToBottom } = this.settings;
    if (!document.body.querySelector(ROOT_WORKSPACE_CLASS)) {
      if (this.maxValue < this.currentValue)
        return;
      setTimeout(() => {
        this.createButton();
      }, 100);
      return;
    }
    if (enabledScrollToTop) {
      this.crateScrollElement({
        id: "scrollToTop",
        icon: iconScrollToTop
      }, this.scrollToTop.bind(this));
    }
    if (enabledScrollToBottom) {
      this.crateScrollElement({
        id: "scrollToBottom",
        icon: iconScrollToBottom
      }, this.scrollToBottom.bind(this));
    }
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ScrollToTopSettingTab(this.app, this));
    this.currentValue = 0;
    this.createButton();
    setTimeout(() => {
      this.app.workspace.trigger("css-change");
    }, 300);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async loadSettings() {
    this.settings = Object.assign({}, scrollToTopSetting, await this.loadData());
  }
  onunload() {
    this.removeButton("scrollToTop");
    this.removeButton("scrollToBottom");
  }
};
var ScrollToTopSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  createSpanWithLinks(text, href, linkText) {
    const span = document.createElement("span");
    span.innerText = text;
    const link = document.createElement("a");
    link.href = href;
    link.innerText = linkText;
    span.appendChild(link);
    return span;
  }
  rebuildButton() {
    this.plugin.removeButton("scrollToTop");
    this.plugin.removeButton("scrollToBottom");
    this.plugin.createButton();
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Scroll To Top Settings" });
    new import_obsidian.Setting(containerEl).setName("Show scroll to top button").setDesc("Show scroll to top button in the right bottom corner.").addToggle((value) => {
      value.setValue(this.plugin.settings.enabledScrollToTop).onChange(async (value2) => {
        this.plugin.settings.enabledScrollToTop = value2;
        await this.plugin.saveSettings();
        this.rebuildButton();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show scroll to bottom button").setDesc("Show scroll to bottom button in the right bottom corner.").addToggle((value) => {
      value.setValue(this.plugin.settings.enabledScrollToBottom).onChange(async (value2) => {
        this.plugin.settings.enabledScrollToBottom = value2;
        await this.plugin.saveSettings();
        this.rebuildButton();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Change icon of scroll to top button").setDesc(this.createSpanWithLinks("Change icon of scroll to top button. You can visit aviable icons here: ", "https://github.com/mgmeyers/obsidian-icon-swapper", "obsidian-icon-swapper")).addText((value) => {
      value.setValue(this.plugin.settings.iconScrollToTop).onChange(async (value2) => {
        this.plugin.settings.iconScrollToTop = value2;
        await this.plugin.saveSettings();
        this.rebuildButton();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Change icon of scroll to bottom button").setDesc(this.createSpanWithLinks("Change icon of scroll to bottom button. You can visit aviable icons here: ", "https://github.com/mgmeyers/obsidian-icon-swapper", "obsidian-icon-swapper")).addText((value) => {
      value.setValue(this.plugin.settings.iconScrollToBottom).onChange(async (value2) => {
        this.plugin.settings.iconScrollToBottom = value2;
        await this.plugin.saveSettings();
        this.rebuildButton();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
